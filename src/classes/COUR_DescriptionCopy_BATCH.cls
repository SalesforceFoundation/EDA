/*
    Copyright (c) 2017, Salesforce.org
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Salesforce.org nor the names of
      its contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.
*/
/**
* @author Salesforce.org
* @date 2017
* @group Courses
* @group-content ../../ApexDocContent/Courses.htm
* @description Copies Course descriptions to the Extended Description field.
*/
global class COUR_DescriptionCopy_BATCH implements Database.Batchable<sObject> {

    /*******************************************************************************************************
    * @description start Method for the Database.Batchable interface
    * @param bc the BatchableContext
    * @return database.Querylocator
    ********************************************************************************************************/
	global Database.QueryLocator start(Database.BatchableContext BC) {

		// Get all courses with a description
		//removing Description != null query filter here as it won't allow us to use encryption
        //we manually filter them out later anyway in the execute method (line 61 at the time of this writing)
        String query = 'SELECT Id, Name, Description__c, Extended_Description__c FROM Course__c';

		return Database.getQueryLocator(query);
	}

   	global void execute(Database.BatchableContext BC, List<sObject> scope) {
		List<Course__c> courses = (List<Course__c> ) scope; //Cast list of courses
        
        if(courses.size()>0) {
	        for(Course__c c : courses) {

	        	// Check extended description is blank, since we cannot query for this field in our where clause
	        	if(c.Description__c != null && c.Extended_Description__c == null) {
	        		c.Extended_Description__c = c.Description__c;
	        	}
            }
        }

        update courses;
	}

	global void finish(Database.BatchableContext BC) {

		// Email Notification
		AsyncApexJob a = [SELECT Id, Status, NumberOfErrors, JobItemsProcessed, TotalJobItems, CreatedBy.Email
							FROM AsyncApexJob WHERE Id =:BC.getJobId()];

        // setup parameterized Email body
        String[] params = new String[]{
            String.valueOf(a.TotalJobItems),
            String.valueOf(a.NumberOfErrors)
        };
		String emailBody = String.format(label.stgCourseDescriptionCopyEmailBody, params);

		// Send an email to the Apex job's submitter notifying of job completion.
		Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
		String[] toAddresses = new String[] {a.CreatedBy.Email};
		mail.setToAddresses(toAddresses);

		mail.setSubject(label.stgCourseDescriptionCopyEmailSubject + ' ' + a.Status);
		mail.setPlainTextBody(emailBody);

		//Prevent sending email in the unit test
		if(!Test.isRunningTest()) {
			Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
		}

	}

}