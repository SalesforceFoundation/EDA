/*
    Copyright (c) 2013, Salesforce.org
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Salesforce.org nor the names of
      its contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * @author Salesforce.org
 * @date 2014
 * @group TDTM
 * @group-content ../../ApexDocContent/TDTM.htm
 * @description A Class to retreive, cache and interact with the Org wide TDTM configurtaion
 */
public class TDTM_Config {

    /*******************************************************************************************************
    * @description Holds the trigger handlers cached in a list, to avoid repetitive soql calls.
    *********************************************************************************************************/
    @TestVisible
    private static List<TDTM_Global_API.TdtmToken> tdtmTokensCache;

    /*******************************************************************************************************
    * @description Number of trigger handlers records that currently exist in the system.
    *********************************************************************************************************/
    private static Integer rowCount;

    /********************************************************************************************************
    * @description Returns the TDTM configuration. If no configuration is currently set, it will return
    * the default configuration without setting it. The configuration returned has not yet been inserted in the
    * database. It can be manipulated, if necessary, then set.
    * If no configuration exists, the application will insert the defaults when any of the triggers run.
    * @return List<TDTM_Global_API.TdtmToken> List of trigger handler tokens with the default values.
    *********************************************************************************************************/
    public static List<TDTM_Global_API.TdtmToken> getTdtmConfig() {
        if(tdtmTokensCache != null && tdtmTokensCache.size() > 0) {
            return tdtmTokensCache;
        }

        List<TDTM_Global_API.TdtmToken> tokens  = new List<TDTM_Global_API.TdtmToken>();

        if(Advancement_Info.useAdv() && Advancement_Info.getApiHEDA() != null) {
            //If Advancement is installed and enabled, Using Adv config
            tokens = Advancement_Info.getApiHEDA().getDefaultTdtmConfigTokens();

        } else {
            List<Trigger_Handler__c> tdtmConfig = [select Class__c, Object__c, Trigger_Action__c, Load_Order__c, Active__c,
                    Asynchronous__c, Filter_Field__c, Filter_Value__c, User_Managed__c, Owned_by_Namespace__c , Usernames_to_Exclude__c
                    FROM Trigger_Handler__c];

            // Getting the default configuration only if there is no data in the Trigger Handler object. Otherwise
            // we would delete customizations and Trigger Handlers entries that aren't in the default configuration.
            if(tdtmConfig.size() == 0) {
                tdtmConfig = TDTM_DefaultConfig.getDefaultRecords();
            }

            for(Trigger_Handler__c handler : tdtmConfig) {
                tokens.add(new TDTM_Global_API.TdtmToken(handler.Class__c, handler.Object__c, handler.Trigger_Action__c,
                        handler.Load_Order__c, handler.Active__c, handler.Asynchronous__c,
                        handler.Filter_Field__c, handler.Filter_Value__c, handler.User_Managed__c, handler.Owned_by_Namespace__c,
                        handler.Usernames_to_Exclude__c));            
            }
        }

        tdtmTokensCache = tokens;
        return tokens;
    }

    /********************************************************************************************************
    * @description Returns the default TDTM configuration directly as TDTM Tokens as a List.
    * @return List<TDTM_Global_API.TdtmToken> List of trigger handler tokens with the default values.
    *********************************************************************************************************/
    public static List<TDTM_Global_API.TdtmToken> getDefaultTdtmConfig() {
        //Removed tdtmTokensCache here since this method suppose to always return default TDTM from TDTM_DefaultConfig. We do not need to cache it since there is no query in this method. Also, it should not shared the same cached tokens with getTdtmConfig method.

        List<TDTM_Global_API.TdtmToken> tokens = new List<TDTM_Global_API.TdtmToken>();

        List<Trigger_Handler__c> existingHandlers = TDTM_DefaultConfig.getDefaultRecords();
        for(Trigger_Handler__c handler : existingHandlers) {
            tokens.add(
                new TDTM_Global_API.TdtmToken(handler.Class__c, handler.Object__c, handler.Trigger_Action__c,
                                              handler.Load_Order__c, handler.Active__c, handler.Asynchronous__c,
                                              handler.Filter_Field__c, handler.Filter_Value__c, handler.User_Managed__c,
                                              handler.Owned_by_Namespace__c, handler.Usernames_to_Exclude__c)                           
            );
        }

        return tokens;
    }

    /*******************************************************************************************************
    * @description Checks if any Trigger Handler records exist in the database.
    * @return Boolean True is there are no TDTM records. False otherwise.
    *********************************************************************************************************/
    public static Boolean isEmpty() {
        if(rowCount == null) {
            List<AggregateResult> result = [select count(Id) rowCount from Trigger_Handler__c];
            rowCount = (Integer)result[0].get('rowCount');
            UTIL_Debug.debug('****rowCount: ' + rowCount);
        }
        if(rowCount == 0)
            return true;
        return false;
    }

    /*******************************************************************************************************
    * @description Returns the classes that will be called for the specified object and action. Returned list
    *              is sorted by load order.
    * @param objectName The name of the object.
    * @param action The action (before insert, after insert,...).
    * @return List<DTM_Global_API.TdtmToken> List of trigger handlers to call, sorted by load order.
    *********************************************************************************************************/
    public static List<TDTM_Global_API.TdtmToken> getClassesToCallForObject(String objectName, TDTM_Runnable.Action action) {

        //Getting the TDTM configuration and storing it in the cache.
        List<TDTM_Global_API.TdtmToken> tdtmTokens = getTdtmConfig();
        List<TDTM_Global_API.TdtmToken> objectTokens = new List<TDTM_Global_API.TdtmToken>();
        //Get current username
        String currUserName = UserInfo.getUserName();

        for(TDTM_Global_API.TdtmToken token : tdtmTokens) {
            
            //Get a list of excluded usernames in lowercase
            Set<String> excludedUserNamesLowercase = TDTM_ExcludedUserNames.userNamesToExclude(token);
            
            //Filtering those active by object and action.
            //Actions should not be null, otherwise it will throw null pointer exception. We might need to create a WI to do more validation on insert/update Trigger Handler
            if(token.active && token.targetObject == objectName
                    && token.actions != null
                    && token.actions.contains(action.Name())
                    && !excludedUserNamesLowercase.contains(currUsername)) {
                objectTokens.add(token);
            }
        }

        // Order by loadOrder
        objectTokens.sort();

        return objectTokens;
    }
}