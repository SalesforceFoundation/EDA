/*
    Copyright (c) 2018, Salesforce.org
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Salesforce.org nor the names of
      its contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.
*/
/**
* @author Salesforce.org
* @date 2018
* @group Program Plan
* @group-content ../../ApexDocContent/ProgramPlan.htm
* @description Stops an Program Plan from being deleted if it links to any Plan Requirement or Program Enrollment
*/
public with sharing class PPlan_CannotDelete_TDTM extends TDTM_Runnable {
    /*******************************************************************************************************
    * @description Get the setting of preventing Program Plan deletion
    */
    private static Boolean enabledPreventProgramPlanDeletion = UTIL_CustomSettingsFacade.getSettings().Prevent_Program_Plan_Deletion__c;

    /*******************************************************************************************************
    * @description Stops an Program Plan from being deleted if it links to any Plan Requirement or Program Enrollment
    * @param listNew the list of Program Plan from trigger new.
    * @param listOld the list of Program Plan from trigger old.
    * @param triggerAction which trigger event (BeforeInsert, AfterInsert, etc.).
    * @param objResult the describe for Program Plan
    * @return dmlWrapper.
    ********************************************************************************************************/
    public override DmlWrapper run(List<SObject> newlist, List<SObject> oldlist,
            TDTM_Runnable.Action triggerAction, Schema.DescribeSObjectResult objResult) {
        
        // return if Program Plan Deletion is not enabled
        if (!enabledPreventProgramPlanDeletion) {
            return new DmlWrapper();
        }

        Map<ID, SObject> oldmap = new Map<ID, SObject>(oldlist);

        if (triggerAction == TDTM_Runnable.Action.BeforeDelete) {
            for (Program_Plan__c programPlan : [SELECT ID,
                                                        (SELECT ID FROM Plan_Requirements__r LIMIT 1),
                                                        (SELECT ID FROM Program_Enrollments__r LIMIT 1)
                                                FROM Program_Plan__c
                                                WHERE ID IN :oldlist]) {
                if (programPlan.Plan_Requirements__r.isEmpty() == false
                    || programPlan.Program_Enrollments__r.isEmpty() == false) {
                    Program_Plan__c programplanInContext = (Program_Plan__c)oldmap.get(programPlan.ID);
                    programplanInContext.addError(Label.CannotDelete);
                }
            }
        }

        return new DmlWrapper();
    }
}